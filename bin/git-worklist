#!/usr/bin/env bash

# Shows the usage
function usage() {
  cat <<EOS
Usage:
  git worklist [-a <assignee name>] [-m <max-dir-depth>] [-h] [-s]

  -a      - Specify assignee to restrict search to
  -m      - Specify the depth of recursive directory search
  -h      - Display this help screen
  -s      - Silences the no activity message (useful when running in a directory having many repositories)

Examples:
  git worklist -a "John Doe" -m 2
EOS
}

# Sets up the colored output
function colored() {
  YELLOW=$(tput setaf 3)
  BOLD=$(tput bold)
  UNDERLINE=$(tput smul)
  NORMAL=$(tput sgr0)
  COLOR=always
  OPTION="--color"
}

# Sets up the uncolored output
function uncolored() {
  YELLOW=""
  BOLD=""
  UNDERLINE=""
  NORMAL=""
  COLOR=never
  OPTION=""
}

function writeFile() {
  echo -e $1 >> "${REPORT_FILE_PATH}"
}

function runWorklist() {
  {
    GITOUT=$(eval ${GIT_ISSUE_COMMAND} 2>/dev/null )
  } || {
    GITOUT=""
  }

    ## Only output if there is some activity
  if [[ ! -z "$GITOUT" ]] ;  then
    echo "${BOLD}${UNDERLINE}${YELLOW}$CUR_DIR${NORMAL}"
    echo "$GITOUT"
  elif [[ -z $option_s ]] ; then  ## Show the no activity message only if the `s` flag is not there
    echo "${BOLD}${UNDERLINE}${YELLOW}$CUR_DIR${NORMAL}"
    if [[ ${ASSIGNEE} = '.*' ]] ; then
      echo "${YELLOW}No issues found.${NORMAL}"
    else
      echo "${YELLOW}No issues for $ASSIGNEE found.${NORMAL}"
    fi
  fi
}

################ START OF SCRIPT #############################
while getopts "hsm:a" opt; do
  case $opt in
    h|a|m|s)
      declare "option_$opt=${OPTARG:-0}"
      ;;
    \?)
      echo >&2 "Use 'git-worklist -h' to see usage info"
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

if [[ $# -gt 0 ]]; then
  echo >&2 "Invalid arguments: $@"
  echo >&2 "Use 'git-worklist -h' to see usage info"
  exit 1
fi

# Main script
if [[ $option_h ]]; then
  usage
  exit 0
fi

# Use colors, but only if connected to a terminal, and that terminal supports them.
if [[ -t 1 ]] && [[ -n "$TERM" ]] && which tput &>/dev/null && tput colors &>/dev/null; then
  ncolors=$(tput colors)
  if [[ -n "$ncolors" ]] && [[ "$ncolors" -ge 8 ]]; then
    colored
  else
    uncolored
  fi
else
  uncolored
fi

## Set the necessary variables for worklist
MAXDEPTH=2
RAN_FROM_DIR=`pwd`
REPORT_FILE_PATH="${RAN_FROM_DIR}/git-worklist-report.txt"

if [[ $option_m ]] ; then
  MAXDEPTH="$(($option_m + 1))"
fi

# For when the command has been run in a non-repo directory
if [[ ! -d ".git" || -f ".git" ]]; then
  BASE_DIR=`pwd`
  # Set delimiter to newline for the loop
  IFS=$'\n'

  if [[ -f ".git-worklist-whitelist" ]]; then
    SEARCH_PATH=`cat .git-worklist-whitelist`
  else
    SEARCH_PATH=.
  fi

  # Recursively search for git repositories
  PROJECT_DIRS=`find ${INCLUDE_LINKS} ${SEARCH_PATH} -maxdepth ${MAXDEPTH} -mindepth 0 -name .git`
elif [[ -f ".git" || -d ".git" ]]; then
  PROJECT_DIRS=("`pwd`/.git")
fi

# if project directories is still empty
# we might be sitting inside a git repo
if [[ -z ${PROJECT_DIRS} ]]; then
  ROOT_DIR_COMMAND="git rev-parse --show-toplevel"
  PROJECT_ROOT=$(eval ${ROOT_DIR_COMMAND} 2>/dev/null )

  if [[ -z ${PROJECT_ROOT} ]]; then
    echo "${YELLOW}You must be inside a git repository!${NORMAL}"
    exit 0
  fi

  PROJECT_DIRS=("${PROJECT_ROOT}/.git")
fi

# Foreach of the project directories, run the worklist
for DIR in ${PROJECT_DIRS}; do
  PROJECT_DIR=`dirname "$DIR"`
  cd "$PROJECT_DIR"
  CUR_DIR=`pwd`
  BASENAME=`basename "$CUR_DIR"`

  # continue if not a git directory
  if [[ ! -d ".git" || -f ".git" ]] ; then
    cd ${BASE_DIR}
    continue
  fi

  ASSIGNEE=`git config user.username`

  if [[ $option_a ]] ; then
    # In case the parameter
    if [[ $option_a = 'all' ]] ; then
      ASSIGNEE=".*"
    else
      ASSIGNEE="$option_a"
    fi
  fi

  GIT_ISSUE_COMMAND="hub issue ${OPTION} -a \"$ASSIGNEE\""

  runWorklist

  cd ${BASE_DIR}
done
